// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
  posts Post[]
}

model Post {
  id        Int     @id @default(autoincrement())
  title     String
  content   String?
  published Boolean @default(false)
  authorId  Int
  author    User    @relation(fields: [authorId], references: [id])
}

model DiveCompany {
  id       String    @id @default(cuid())
  name     String
  email    String
  phone    String
  bookings Booking[]
}

model Charter {
  id        String    @id @default(cuid())
  date      DateTime
  bookings  Booking[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Booking {
  id            String        @id @default(cuid())
  diveCompanyId String
  charterId     String
  status        BookingStatus @default(PENDING)
  guests        Guest[]

  // Relations
  diveCompany   DiveCompany   @relation(fields: [diveCompanyId], references: [id])
  charter       Charter       @relation(fields: [charterId], references: [id])
}

model Guest {
  id        String  @id @default(cuid())
  bookingId String
  name      String
  email     String
  phone     String

  // Relation
  booking   Booking @relation(fields: [bookingId], references: [id])
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
}
